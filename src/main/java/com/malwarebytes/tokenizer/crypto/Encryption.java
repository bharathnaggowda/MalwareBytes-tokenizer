package com.malwarebytes.tokenizer.crypto;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class Encryption {
	
	private static final Logger logger = LoggerFactory.getLogger(Encryption.class);
	
	private Cipher cipher = null;
	
	public String generateKey(){
		
		KeyGenerator keyGenerator = null;
		SecretKey secretKey = null;
		String keyString = null;
		try {
			logger.info("Generating secret key");
			keyGenerator = KeyGenerator.getInstance("AES");
			keyGenerator.init(128);
			secretKey = keyGenerator.generateKey();
			keyString = Base64.getEncoder().encodeToString(secretKey.getEncoded());
		    
		} catch (NoSuchAlgorithmException e) {
			logger.error(e.toString());
		}
		return keyString;
	}
	
	public String encrypt(String strToEncrypt, String secret, String transactionId) {
		logger.info("Encrypting card details for transactionId: "+transactionId);
		byte[] encryptedBytes = null;
		try {
			cipher = Cipher.getInstance("AES");
			SecretKeySpec secretKeySpec = new SecretKeySpec(Base64.getDecoder().decode(secret), "AES"); 
			cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, new SecureRandom());
			encryptedBytes = cipher.doFinal(strToEncrypt.getBytes("UTF-8"));
		} catch (InvalidKeyException e) {
			logger.error(e.toString());
		} catch (IllegalBlockSizeException e) {
			logger.error(e.toString());
		} catch (BadPaddingException e) {
			logger.error(e.toString());
		} catch (UnsupportedEncodingException e) {
			logger.error(e.toString());
		}  catch (NoSuchAlgorithmException e) {
			logger.error(e.toString());
		} catch (NoSuchPaddingException e) {
			logger.error(e.toString());
		}
		String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);
		return encryptedText;
	}

	public String decrypt(String token, String secretKey, String transactionId){
		logger.info("Decrypting card details for transactionId: "+transactionId);
		String decryptedText = null;
		try {
			cipher = Cipher.getInstance("AES");
			cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(Base64.getDecoder().decode(secretKey), "AES"));
			decryptedText = new String(cipher.doFinal(Base64.getDecoder().decode(token)));
		} catch (NoSuchAlgorithmException e) {
			logger.error(e.toString());
		} catch (NoSuchPaddingException e) {
			logger.error(e.toString());
		} catch (InvalidKeyException e) {
			logger.error(e.toString());
		} catch (IllegalBlockSizeException e) {
			logger.error(e.toString());
		} catch (BadPaddingException e) {
			logger.error(e.toString());
		}
        System.out.println("decryptedText : " + decryptedText);
        return decryptedText;
	}
}
