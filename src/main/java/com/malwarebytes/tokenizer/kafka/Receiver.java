package com.malwarebytes.tokenizer.kafka;

import java.io.IOException;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.handler.annotation.Headers;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.malwarebytes.tokenizer.Card;
import com.malwarebytes.tokenizer.Keys;
import com.malwarebytes.tokenizer.crypto.Encryption;
import com.malwarebytes.tokenizer.interfaces.KeysRepository;

@Service
public class Receiver {

    private static final Logger logger = LoggerFactory.getLogger(Receiver.class);
    
    @Autowired
    private Encryption encryption;
    
    @Autowired
    private KeysRepository keysRepository;

    @KafkaListener(topics = "${app.topic.cards}")
    public void receive(@Payload String message,
                        @Headers MessageHeaders headers) {
    	String[] body = message.split(":");
    	String key = body[0].trim();
        logger.info("received message from topic: "+ message);
        
        try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			logger.error(e.toString());
		}
        logger.info("Finding secret key for transactionId: "+ key+" in Redis");
        Optional<Keys> keys = keysRepository.findById(key);
        
        Card card = null;
        try {
			String originalBody = encryption.decrypt(body[1], keys.get().getSecretKey(), key);
			
			ObjectMapper mapper = new ObjectMapper();
			card = mapper.readValue(originalBody, Card.class);
			
			logger.info("Card details after decryption" );
			logger.info("cardNumber: "+card.getCardNumber());
			logger.info("expirationDate: "+ card.getExpirationDate());
			logger.info("cvv: "+card.getCvv());
			
		} catch (JsonParseException e) {
			logger.error(e.toString());
		} catch (JsonMappingException e) {
			logger.error(e.toString());
		} catch (IOException e) {
			logger.error(e.toString());		
		} catch (Exception e) {
			logger.error(e.toString());
		}
    }
}
